##
## tkn task start source-lister --showlog --param url=https://github.com/redhat-scholars/tekton-tutorial-greeter --param revision=master --param  subdirectory='' --param contextDir=quarkus --param sslVerify=false -w name=source,emptyDir= 
###
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: source-lister
  namespace: tektontutorial
spec:
  params:
    - default: 'https://github.com/redhat-scholars/tekton-tutorial-greeter'
      name: url
      type: string
    - default: master
      name: revision
      type: string
    - default: ''
      name: subdirectory
      type: string
    - default: quarkus
      description: The context directory within the repository for sources
      name: contextDir
      type: string
    - default: 'false'
      description: >-
        defines if http.sslVerify should be set to true or false in the global
        git config
      name: sslVerify
      type: string
  results:
    - description: The precise commit SHA that was fetched by this Task.
      name: commit
    - description: The precise URL that was fetched by this Task.
      name: url
  steps:
    - image: 'gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.44.4'
      name: clone
      resources: {}
      script: |
        CHECKOUT_DIR="$(workspaces.source.path)/$(params.subdirectory)"
        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
          # or the root of a mounted volume.
          if [[ -d "$CHECKOUT_DIR" ]] ; then
            # Delete non-hidden files and directories
            rm -rf "$CHECKOUT_DIR"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "$CHECKOUT_DIR"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "$CHECKOUT_DIR"/..?*
          fi
        }
        echo "Cleaning output directory $CHECKOUT_DIR"
        cleandir
        echo "CLEANED output directory $CHECKOUT_DIR"
        git config --global --add safe.directory "$(workspaces.source.path)"
        
        /ko-app/git-init \
          -url "$(params.url)" \
          -revision "$(params.revision)" \
          -path "$CHECKOUT_DIR" \
          -sslVerify="$(params.sslVerify)" 
        cd "$CHECKOUT_DIR"
        RESULT_SHA="$(git rev-parse HEAD)"
        printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"

        echo -e "\n\nresults.commit.path = $(results.commit.path)"
        echo -e "\n\nresults.url.path = $(results.url.path)"
        echo -e "\n\nresults = $(results)"
    - name: ls-build-sources
      script: |
        echo -e "\n\nls of cloned git files in /workspace/source/$(params.contextDir) ..."
        ls -altr /workspace/source/$(params.contextDir)
        echo -e "\n\nMounted filesystems ..."
        df -h
        echo -e "\n\nThe root filesystem / ..."
        ls -altr /
        echo -e "\n\nThe workspace directory /workspace/* ..."
        cd /workspace
        find .
        echo -e "\n\nThe tekton directory /tekton/* ..."
        cd /tekton
        find .

        echo -e "\n\nUser information ..."
        echo "id = $(id)"
        echo "id -ru = $(id -ru)"
        echo "id -rg = $(id -rg)"
        echo "id -rG = $(id -rG)"
        echo "id -un = $(id -un)"
        echo "id -gn = $(id -gn)"
        echo "id -Gn = $(id -Gn)"

        echo -e "\n\nresults.commit.path:\n $(cat $(results.commit.path))"
        echo -e "\n\nresults.url.path:\n $(cat $(results.url.path))"
      image: busybox
      resources: {}
      workingDir: /workspace/source/$(params.contextDir)
  workspaces:
    - description: The git repo will be cloned onto the volume backing this workspace
      name: source
